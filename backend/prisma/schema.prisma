generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Roles in the system
enum Role {
  STUDENT
  PROFESSOR
  REGISTRAR
  ADMISSION
  DEAN
}

// Grade values based on the spec
enum GradeValue {
  G1_0
  G1_25
  G1_5
  G1_75
  G2_0
  G2_25
  G2_5
  G2_75
  G3_0
  G4_0
  G5_0
  INC
  DRP
}

// Subject type for eligibility logic
enum SubjectType {
  MAJOR
  MINOR
}

// Academic semester
enum Semester {
  FIRST
  SECOND
  SUMMER
}

// Enrollment status
enum EnrollmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// Section status
enum SectionStatus {
  OPEN
  CLOSED
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  role         Role
  firstName    String
  lastName     String
  status       String    @default("active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  sessions   Session[]
  resetTokens PasswordResetToken[]
  student    Student?
  professor  Professor?
  logs       ActivityLog[]
}

model Session {
  tokenHash String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  revokedAt DateTime?

  @@index([userId])
}

model PasswordResetToken {
  tokenHash String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  usedAt    DateTime?

  @@index([userId])
}

model Student {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])
  studentNo  String    @unique
  programId  Int
  program    Program   @relation(fields: [programId], references: [id])
  yearLevel  Int
  gpa        Decimal?  @db.Decimal(3, 2)
  hasInc     Boolean   @default(false)
  status     String    @default("regular")

  enrollments Enrollment[]
  incRes      IncResolution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([programId])
}

model Professor {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id])
  department       String
  employmentStatus String   @default("full-time")
  sections         Section[]
  encodedGrades    Grade[]  @relation("EncodedByProfessor")
  incResolutions   IncResolution[]
}

model Program {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  department  String
  description String?

  subjects ProgramSubject[]
  students Student[]
}

// Mapping subjects to program and recommended year/semester
model ProgramSubject {
  id                 Int       @id @default(autoincrement())
  programId          Int
  subjectId          Int
  recommendedYear    Int?
  recommendedSemester Semester?

  program Program @relation(fields: [programId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([programId, subjectId])
  @@index([subjectId])
}

model Subject {
  id             Int           @id @default(autoincrement())
  code           String        @unique
  name           String
  units          Int
  subjectType    SubjectType
  yearStanding   Int?          // if null, no year restriction
  prerequisiteId Int?
  prerequisite   Subject?      @relation("Prereq", fields: [prerequisiteId], references: [id])
  requiredFor    Subject[]     @relation("Prereq")

  programs ProgramSubject[]
  sections Section[]
  enrollmentSubjects EnrollmentSubject[]
  incResolutions     IncResolution[]
}

model Section {
  id           Int           @id @default(autoincrement())
  name         String
  subjectId    Int
  subject      Subject       @relation(fields: [subjectId], references: [id])
  professorId  Int
  professor    Professor     @relation(fields: [professorId], references: [id])
  maxSlots     Int
  semester     Semester
  academicYear String
  schedule     String?
  status       SectionStatus @default(OPEN)

  enrollmentSubjects EnrollmentSubject[]

  @@index([subjectId])
  @@index([professorId])
}

model AcademicTerm {
  id          Int       @id @default(autoincrement())
  schoolYear  String
  semester    Semester
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())

  enrollments Enrollment[]

  @@unique([schoolYear, semester])
}

model Enrollment {
  id           Int               @id @default(autoincrement())
  studentId    Int
  student      Student           @relation(fields: [studentId], references: [id])
  termId       Int
  term         AcademicTerm      @relation(fields: [termId], references: [id])
  dateEnrolled DateTime          @default(now())
  status       EnrollmentStatus  @default(PENDING)

  subjects EnrollmentSubject[]

  @@index([studentId])
  @@index([termId])
}

model EnrollmentSubject {
  id            Int       @id @default(autoincrement())
  enrollmentId  Int
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  sectionId     Int
  section       Section    @relation(fields: [sectionId], references: [id])
  subjectId     Int
  subject       Subject    @relation(fields: [subjectId], references: [id])
  units         Int

  grade         Grade?

  @@index([enrollmentId])
  @@index([sectionId])
  @@index([subjectId])
}

model Grade {
  id                   Int         @id @default(autoincrement())
  enrollmentSubjectId  Int         @unique
  enrollmentSubject    EnrollmentSubject @relation(fields: [enrollmentSubjectId], references: [id])
  value                GradeValue
  remarks              String?
  encodedByProfessorId Int?
  encodedByProfessor   Professor?  @relation("EncodedByProfessor", fields: [encodedByProfessorId], references: [id])
  approved             Boolean     @default(false)
  dateEncoded          DateTime    @default(now())
  repeatEligibleDate   DateTime?
}

model IncResolution {
  id                   Int        @id @default(autoincrement())
  studentId            Int
  student              Student    @relation(fields: [studentId], references: [id])
  subjectId            Int
  subject              Subject    @relation(fields: [subjectId], references: [id])
  oldGrade             GradeValue
  newGrade             GradeValue
  professorId          Int
  professor            Professor  @relation(fields: [professorId], references: [id])
  approvedByRegistrar  Boolean    @default(false)
  dateSubmitted        DateTime   @default(now())
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  action    String
  description String?
  timestamp DateTime @default(now())

  @@index([userId])
}
